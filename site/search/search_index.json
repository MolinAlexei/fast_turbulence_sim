{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"references/simulation/","title":"simulation","text":""},{"location":"references/simulation/#simulation","title":"<code>simulation</code>","text":""},{"location":"references/simulation/#simulation.Simulation","title":"<code>Simulation</code>","text":"<p>               Bases: <code>Module</code></p> Source code in <code>src/simulation.py</code> <pre><code>class Simulation(hk.Module):\n\n    def __init__(self, \n                spatial_grid,\n                structure_function,\n                binning,\n                projection,\n                radial_bins_mes_errors,\n                censhift_offsets,\n                censhift_errors,\n                broad_offsets,\n                broad_errors,\n                ):\n        \"\"\"\n        Initialize simulation model\n\n        Parameters:\n            spatial_grid (hk.Module): 3D spatial grid\n            structure_function (hk.Module): Structure Function\n            binning (hk.Module): Binning\n            projection (hk.Module) : Projection\n            radial_bins_mes_errors (jnp.array): Bounds of the radial bins defininf the measurement error\n            censhift_offsets (jnp.array): Means of censhift measurement error\n            censhift_errors (jnp.array): stds of censhift measurement error\n            broad_offsets (jnp.array): Means of broadening measurement error\n            broad_errors (jnp.array): std of censhift measurement error\n        \"\"\"\n\n        super(Simulation, self).__init__()\n\n\n        # Initialize \n        self.fluctuation_generator = FluctuationCube(spatial_grid)\n        #self.pars = self.fluctuation_generator.init(rng_key())\n\n        # Binning\n        self.binning = binning\n\n        # Structure Function function\n        self.StructureFunction = structure_function\n\n        # Projection\n        self.projection = projection\n\n        # Half size of the grid\n        half_grid_size = spatial_grid.shape[0]/2\n\n        # Distances of bins to center of grid\n        rBar_bins = jnp.sqrt((binning.xBar_bins - half_grid_size)**2 + (binning.yBar_bins - half_grid_size)**2)\n\n        # Spread in centroid shift measurement error in each bin\n        self.offsets_v = censhift_offsets[jnp.searchsorted(radial_bins_mes_errors, rBar_bins)-1]\n        self.errors_v = censhift_errors[jnp.searchsorted(radial_bins_mes_errors, rBar_bins)-1]\n\n        # Spread in broadening measurement error in each bin\n        self.offsets_std = broad_offsets[jnp.searchsorted(radial_bins_mes_errors, rBar_bins)-1]\n        self.errors_std = broad_errors[jnp.searchsorted(radial_bins_mes_errors, rBar_bins)-1]\n\n    def __call__(self):\n        \"\"\"\n        Creates a realization of a GRF for the speed along the los\n        Projects the speed with em-weighting in binned maps\n        Adds measurement error\n        Returns the structure function\n\n        Returns:\n            dist (jn.array) : Vector of separations at which the SF is computed\n            sf (jnp.array) : SF of centroid shift\n            sf_std (jnp.array) : SF of broadening\n            v_vec (jnp.array) : Vector of centroid shifts\n            std_vec (jnp.array) : Vector of broadenings\n        \"\"\"\n\n        key = hk.next_rng_key()\n\n        v_cube = self.fluctuation_generator()\n\n        _,_,v_vec, std_vec = self.projection(v_cube)\n\n        #Add measurement error on centroid shift\n        err_v = random.multivariate_normal(key = key,\n                                            mean = self.offsets_v, \n                                            cov = jnp.diag(self.errors_v**2))\n\n        v_vec += jnp.where(jnp.invert(jnp.isnan(err_v)), err_v, 0)\n        #v_vec = v_vec.at[jnp.invert(jnp.isnan(err_v))].add(err_v)\n\n\n        # Add measurement error on broadening \n        # with a Gamma distribution, so that for high broadening values, \n        # the errors are distributed normally around the expected vector\n        # and for low broadening values, the errors are always positive\n\n        mu = std_vec + self.offsets_std\n        a = mu**2 / self.errors_std**2\n        scale = self.errors_std**2 / mu\n        std_vec = random.gamma(key = rng_key(),a = a) * scale\n\n\n        #SF of velocity map\n        dist, sf = self.StructureFunction(v_vec , \n                                          self.binning.xBar_bins, \n                                          self.binning.yBar_bins)\n        dist, sf_std = self.StructureFunction(std_vec, \n                                              self.binning.xBar_bins, \n                                              self.binning.yBar_bins)\n\n        return dist, sf, sf_std, v_vec, std_vec\n</code></pre>"},{"location":"references/simulation/#simulation.Simulation.__call__","title":"<code>__call__()</code>","text":"<p>Creates a realization of a GRF for the speed along the los Projects the speed with em-weighting in binned maps Adds measurement error Returns the structure function</p> <p>Returns:</p> Type Description <p>dist (jn.array) : Vector of separations at which the SF is computed</p> <p>sf (jnp.array) : SF of centroid shift</p> <p>sf_std (jnp.array) : SF of broadening</p> <p>v_vec (jnp.array) : Vector of centroid shifts</p> <p>std_vec (jnp.array) : Vector of broadenings</p> Source code in <code>src/simulation.py</code> <pre><code>def __call__(self):\n    \"\"\"\n    Creates a realization of a GRF for the speed along the los\n    Projects the speed with em-weighting in binned maps\n    Adds measurement error\n    Returns the structure function\n\n    Returns:\n        dist (jn.array) : Vector of separations at which the SF is computed\n        sf (jnp.array) : SF of centroid shift\n        sf_std (jnp.array) : SF of broadening\n        v_vec (jnp.array) : Vector of centroid shifts\n        std_vec (jnp.array) : Vector of broadenings\n    \"\"\"\n\n    key = hk.next_rng_key()\n\n    v_cube = self.fluctuation_generator()\n\n    _,_,v_vec, std_vec = self.projection(v_cube)\n\n    #Add measurement error on centroid shift\n    err_v = random.multivariate_normal(key = key,\n                                        mean = self.offsets_v, \n                                        cov = jnp.diag(self.errors_v**2))\n\n    v_vec += jnp.where(jnp.invert(jnp.isnan(err_v)), err_v, 0)\n    #v_vec = v_vec.at[jnp.invert(jnp.isnan(err_v))].add(err_v)\n\n\n    # Add measurement error on broadening \n    # with a Gamma distribution, so that for high broadening values, \n    # the errors are distributed normally around the expected vector\n    # and for low broadening values, the errors are always positive\n\n    mu = std_vec + self.offsets_std\n    a = mu**2 / self.errors_std**2\n    scale = self.errors_std**2 / mu\n    std_vec = random.gamma(key = rng_key(),a = a) * scale\n\n\n    #SF of velocity map\n    dist, sf = self.StructureFunction(v_vec , \n                                      self.binning.xBar_bins, \n                                      self.binning.yBar_bins)\n    dist, sf_std = self.StructureFunction(std_vec, \n                                          self.binning.xBar_bins, \n                                          self.binning.yBar_bins)\n\n    return dist, sf, sf_std, v_vec, std_vec\n</code></pre>"},{"location":"references/simulation/#simulation.Simulation.__init__","title":"<code>__init__(spatial_grid, structure_function, binning, projection, radial_bins_mes_errors, censhift_offsets, censhift_errors, broad_offsets, broad_errors)</code>","text":"<p>Initialize simulation model</p> <p>Parameters:</p> Name Type Description Default <code>spatial_grid</code> <code>Module</code> <p>3D spatial grid</p> required <code>structure_function</code> <code>Module</code> <p>Structure Function</p> required <code>binning</code> <code>Module</code> <p>Binning</p> required <code>projection</code> <code>hk.Module) </code> <p>Projection</p> required <code>radial_bins_mes_errors</code> <code>array</code> <p>Bounds of the radial bins defininf the measurement error</p> required <code>censhift_offsets</code> <code>array</code> <p>Means of censhift measurement error</p> required <code>censhift_errors</code> <code>array</code> <p>stds of censhift measurement error</p> required <code>broad_offsets</code> <code>array</code> <p>Means of broadening measurement error</p> required <code>broad_errors</code> <code>array</code> <p>std of censhift measurement error</p> required Source code in <code>src/simulation.py</code> <pre><code>def __init__(self, \n            spatial_grid,\n            structure_function,\n            binning,\n            projection,\n            radial_bins_mes_errors,\n            censhift_offsets,\n            censhift_errors,\n            broad_offsets,\n            broad_errors,\n            ):\n    \"\"\"\n    Initialize simulation model\n\n    Parameters:\n        spatial_grid (hk.Module): 3D spatial grid\n        structure_function (hk.Module): Structure Function\n        binning (hk.Module): Binning\n        projection (hk.Module) : Projection\n        radial_bins_mes_errors (jnp.array): Bounds of the radial bins defininf the measurement error\n        censhift_offsets (jnp.array): Means of censhift measurement error\n        censhift_errors (jnp.array): stds of censhift measurement error\n        broad_offsets (jnp.array): Means of broadening measurement error\n        broad_errors (jnp.array): std of censhift measurement error\n    \"\"\"\n\n    super(Simulation, self).__init__()\n\n\n    # Initialize \n    self.fluctuation_generator = FluctuationCube(spatial_grid)\n    #self.pars = self.fluctuation_generator.init(rng_key())\n\n    # Binning\n    self.binning = binning\n\n    # Structure Function function\n    self.StructureFunction = structure_function\n\n    # Projection\n    self.projection = projection\n\n    # Half size of the grid\n    half_grid_size = spatial_grid.shape[0]/2\n\n    # Distances of bins to center of grid\n    rBar_bins = jnp.sqrt((binning.xBar_bins - half_grid_size)**2 + (binning.yBar_bins - half_grid_size)**2)\n\n    # Spread in centroid shift measurement error in each bin\n    self.offsets_v = censhift_offsets[jnp.searchsorted(radial_bins_mes_errors, rBar_bins)-1]\n    self.errors_v = censhift_errors[jnp.searchsorted(radial_bins_mes_errors, rBar_bins)-1]\n\n    # Spread in broadening measurement error in each bin\n    self.offsets_std = broad_offsets[jnp.searchsorted(radial_bins_mes_errors, rBar_bins)-1]\n    self.errors_std = broad_errors[jnp.searchsorted(radial_bins_mes_errors, rBar_bins)-1]\n</code></pre>"}]}